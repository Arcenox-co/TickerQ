name: Build and Publish NuGet

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOTNET_NOLOGO: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            3.0.x
            5.0.x
            6.0.x
            7.0.x
            8.0.x
            9.0.x

      - name: Read version from file
        id: get-version
        run: |
          VERSION=$(cat VERSION)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      # ------------------------------------------
      # Build and Pack TickerQ.Utilities
      # ------------------------------------------
      - name: Build TickerQ.Utilities
        run: dotnet build TickerQ.Utilities/TickerQ.Utilities.csproj --configuration Release /p:PackageVersion=${{ steps.get-version.outputs.version }}

      - name: Pack TickerQ.Utilities
        run: dotnet pack TickerQ.Utilities/TickerQ.Utilities.csproj --configuration Release --output ./nupkgs /p:PackageVersion=${{ steps.get-version.outputs.version }}

      # ------------------------------------------
      # Add local nupkgs source for dependencies
      # ------------------------------------------
      - name: Add local nupkgs source
        run: dotnet nuget add source "$(pwd)/nupkgs" --name LocalNupkgs

      # ------------------------------------------
      # Build TickerQ.SourceGenerator
      # ------------------------------------------
      - name: Build TickerQ.SourceGenerator
        run: dotnet build TickerQ.SourceGenerator/TickerQ.SourceGenerator.csproj --configuration Release

      # ------------------------------------------
      # Build all other projects
      # ------------------------------------------
      - name: Build other projects
        run: |
          dotnet build TickerQ/TickerQ.csproj --configuration Release /p:PackageVersion=${{ steps.get-version.outputs.version }}
          dotnet build TickerQ.EntityFrameworkCore/TickerQ.EntityFrameworkCore.csproj --configuration Release /p:PackageVersion=${{ steps.get-version.outputs.version }}
          dotnet build TickerQ.Dashboard/TickerQ.Dashboard.csproj --configuration Release /p:PackageVersion=${{ steps.get-version.outputs.version }}

      # ------------------------------------------
      # Pack other projects
      # ------------------------------------------
      - name: Pack other projects
        run: |
          dotnet pack TickerQ/TickerQ.csproj --configuration Release --output ./nupkgs /p:PackageVersion=${{ steps.get-version.outputs.version }}
          dotnet pack TickerQ.EntityFrameworkCore/TickerQ.EntityFrameworkCore.csproj --configuration Release --output ./nupkgs /p:PackageVersion=${{ steps.get-version.outputs.version }}
          dotnet pack TickerQ.Dashboard/TickerQ.Dashboard.csproj --configuration Release --output ./nupkgs /p:PackageVersion=${{ steps.get-version.outputs.version }}

      # ------------------------------------------
      # Push all packages to NuGet (if not already published)
      # ------------------------------------------
      - name: Push to NuGet.org
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          check_and_push() {
            PACKAGE_NAME=$1
            PACKAGE_FILE=$2
            VERSION=$(basename "$PACKAGE_FILE" | sed -E "s/^$PACKAGE_NAME\.([0-9A-Za-z\.-]+)\.nupkg$/\1/")
            EXISTS=$(curl -s "https://api.nuget.org/v3-flatcontainer/${PACKAGE_NAME,,}/$VERSION/${PACKAGE_NAME,,}.$VERSION.nupkg" -o /dev/null -w "%{http_code}" -s)

            if [ "$EXISTS" == "200" ]; then
              echo "$PACKAGE_NAME $VERSION already exists. Skipping push."
            else
              echo "Pushing $PACKAGE_NAME $VERSION..."
              dotnet nuget push "$PACKAGE_FILE" --source https://api.nuget.org/v3/index.json --api-key $NUGET_API_KEY
            fi
          }

          for file in ./nupkgs/*.nupkg; do
            fname=$(basename "$file")
            if [[ "$fname" == TickerQ.Utilities.*.nupkg ]]; then
              check_and_push "TickerQ.Utilities" "$file"
            elif [[ "$fname" == TickerQ.EntityFrameworkCore.*.nupkg ]]; then
              check_and_push "TickerQ.EntityFrameworkCore" "$file"
            elif [[ "$fname" == TickerQ.Dashboard.*.nupkg ]]; then
              check_and_push "TickerQ.Dashboard" "$file"
            elif [[ "$fname" == TickerQ.*.nupkg ]]; then
              check_and_push "TickerQ" "$file"
            fi
          done
