name: Build and Publish NuGet

on:
  push:
    branches:
      - main

jobs:
  check-nuget:
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.check.outputs.all_exist }}
      version: ${{ steps.get-version.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read version from file
        id: get-version
        run: |
          VERSION=$(cat VERSION)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if all NuGet packages already exist
        id: check
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          PACKAGE_IDS=(tickerq tickerq.dashboard tickerq.utilities tickerq.entityframeworkcore)
          MISSING=0

          for ID in "${PACKAGE_IDS[@]}"; do
            LOWER_ID=$(echo "$ID" | tr '[:upper:]' '[:lower:]')
            URL="https://api.nuget.org/v3-flatcontainer/$LOWER_ID/$VERSION/$LOWER_ID.$VERSION.nupkg"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL")

            if [ "$STATUS" = "200" ]; then
              echo "✅ $ID $VERSION exists on NuGet"
            else
              echo "❌ $ID $VERSION does NOT exist on NuGet"
              MISSING=1
            fi
          done

          if [ "$MISSING" = "0" ]; then
            echo "all_exist=true" >> $GITHUB_OUTPUT
          else
            echo "all_exist=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: check-nuget
    if: needs.check-nuget.outputs.skip != 'true'
    runs-on: ubuntu-latest
    env:
      DOTNET_NOLOGO: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET SDKs
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            3.0.x
            5.0.x
            6.0.x
            7.0.x
            8.0.x
            9.0.x

      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies
        run: npm install
        working-directory: TickerQ.Dashboard/wwwroot

      - name: Build frontend
        run: npm run build
        working-directory: TickerQ.Dashboard/wwwroot

      - name: Build TickerQ.Utilities
        run: dotnet build TickerQ.Utilities/TickerQ.Utilities.csproj --configuration Release /p:PackageVersion=${{ needs.check-nuget.outputs.version }}

      - name: Pack TickerQ.Utilities
        run: dotnet pack TickerQ.Utilities/TickerQ.Utilities.csproj --configuration Release --output ./nupkgs /p:PackageVersion=${{ needs.check-nuget.outputs.version }}

      - name: Add local nupkgs source
        run: dotnet nuget add source "$(pwd)/nupkgs" --name LocalNupkgs

      - name: Build TickerQ.SourceGenerator
        run: dotnet build TickerQ.SourceGenerator/TickerQ.SourceGenerator.csproj --configuration Release

      - name: Build other projects
        run: |
          dotnet build TickerQ/TickerQ.csproj --configuration Release /p:PackageVersion=${{ needs.check-nuget.outputs.version }}
          dotnet build TickerQ.EntityFrameworkCore/TickerQ.EntityFrameworkCore.csproj --configuration Release /p:PackageVersion=${{ needs.check-nuget.outputs.version }}
          dotnet build TickerQ.Dashboard/TickerQ.Dashboard.csproj --configuration Release /p:PackageVersion=${{ needs.check-nuget.outputs.version }}

      - name: Pack other projects
        run: |
          dotnet pack TickerQ/TickerQ.csproj --configuration Release --output ./nupkgs /p:PackageVersion=${{ needs.check-nuget.outputs.version }}
          dotnet pack TickerQ.EntityFrameworkCore/TickerQ.EntityFrameworkCore.csproj --configuration Release --output ./nupkgs /p:PackageVersion=${{ needs.check-nuget.outputs.version }}
          dotnet pack TickerQ.Dashboard/TickerQ.Dashboard.csproj --configuration Release --output ./nupkgs /p:PackageVersion=${{ needs.check-nuget.outputs.version }}

      - name: Show .nupkg file sizes
        run: |
          echo "📦 Package sizes:"
          for pkg in ./nupkgs/*.nupkg; do
            size=$(du -h "$pkg" | cut -f1)
            echo " - $(basename "$pkg"): $size"
          done

      - name: Push to NuGet.org
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          check_and_push() {
            PACKAGE_NAME=$1
            PACKAGE_FILE=$2
            VERSION=$(basename "$PACKAGE_FILE" | sed -E "s/^$PACKAGE_NAME\.([0-9A-Za-z\.-]+)\.nupkg$/\1/")
            EXISTS=$(curl -s -o /dev/null -w "%{http_code}" \
              "https://api.nuget.org/v3-flatcontainer/${PACKAGE_NAME,,}/$VERSION/${PACKAGE_NAME,,}.$VERSION.nupkg")

            if [ "$EXISTS" == "200" ]; then
              echo "$PACKAGE_NAME $VERSION already exists. Skipping push."
            else
              echo "Pushing $PACKAGE_NAME $VERSION..."
              dotnet nuget push "$PACKAGE_FILE" --source https://api.nuget.org/v3/index.json --api-key $NUGET_API_KEY
            fi
          }

          for file in ./nupkgs/*.nupkg; do
            fname=$(basename "$file")
            if [[ "$fname" == TickerQ.Utilities.*.nupkg ]]; then
              check_and_push "TickerQ.Utilities" "$file"
            elif [[ "$fname" == TickerQ.EntityFrameworkCore.*.nupkg ]]; then
              check_and_push "TickerQ.EntityFrameworkCore" "$file"
            elif [[ "$fname" == TickerQ.Dashboard.*.nupkg ]]; then
              check_and_push "TickerQ.Dashboard" "$file"
            elif [[ "$fname" == TickerQ.*.nupkg ]]; then
              check_and_push "TickerQ" "$file"
            fi
          done
