{
  "version": 3,
  "sources": ["../../vuetify/src/labs/VPullToRefresh/VPullToRefresh.tsx"],
  "sourcesContent": ["// Styles\nimport './VPullToRefresh.sass'\n\n// Components\nimport { VIcon } from '@/components/VIcon'\nimport { VProgressCircular } from '@/components/VProgressCircular'\n\n// Utilities\nimport { computed, onMounted, ref, shallowRef, watch } from 'vue'\nimport { clamp, convertToUnit, genericComponent, getScrollParents, useRender } from '@/util'\n\nexport type VPullToRefreshSlots = {\n  default: never\n  pullDownPanel: {\n    canRefresh: boolean\n    goingUp: boolean\n    refreshing: boolean\n  }\n}\n\nexport const VPullToRefresh = genericComponent<VPullToRefreshSlots>()({\n  name: 'VPullToRefresh',\n\n  props: {\n    disabled: Boolean,\n    pullDownThreshold: {\n      type: Number,\n      default: 64,\n    },\n  },\n\n  emits: {\n    load: (options: { done: () => void }) => true,\n  },\n\n  setup (props, { slots, emit }) {\n    let touchstartY = 0\n    let scrollParents: HTMLElement[] = []\n\n    const touchDiff = shallowRef(0)\n    const containerRef = ref<HTMLElement>()\n\n    const refreshing = shallowRef(false)\n    const goingUp = shallowRef(false)\n    const touching = shallowRef(false)\n\n    const canRefresh = computed(() => touchDiff.value >= props.pullDownThreshold && !refreshing.value)\n    const topOffset = computed(() => clamp(touchDiff.value, 0, props.pullDownThreshold))\n\n    function onTouchstart (e: TouchEvent | MouseEvent) {\n      if (refreshing.value || props.disabled) return\n      touching.value = true\n      touchstartY = 'clientY' in e ? e.clientY : e.touches[0].clientY\n    }\n\n    function onTouchmove (e: TouchEvent | MouseEvent) {\n      if (refreshing.value || !touching.value || props.disabled) return\n\n      const touchY = 'clientY' in e ? e.clientY : e.touches[0].clientY\n\n      if (scrollParents.length && !scrollParents[0].scrollTop) {\n        touchDiff.value = touchY - touchstartY\n      }\n    }\n\n    function onTouchend (e: TouchEvent | MouseEvent) {\n      if (refreshing.value || props.disabled) return\n      touching.value = false\n      if (canRefresh.value) {\n        function done () {\n          if (!refreshing.value) return\n          touchDiff.value = 0\n          refreshing.value = false\n        }\n        emit('load', { done })\n        refreshing.value = true\n      } else {\n        touchDiff.value = 0\n      }\n    }\n\n    onMounted(() => {\n      scrollParents = getScrollParents(containerRef.value)\n    })\n\n    watch([topOffset, refreshing], () => {\n      if (scrollParents.length) {\n        const stopScrolling = topOffset.value && !refreshing.value\n        scrollParents.forEach(p => p.style.overflow = stopScrolling ? 'hidden' : 'auto')\n      }\n    })\n\n    watch(topOffset, (newVal, oldVal) => {\n      goingUp.value = newVal < oldVal\n    })\n\n    useRender(() => {\n      return (\n        <div\n          class={[\n            'v-pull-to-refresh',\n          ]}\n          onTouchstart={ onTouchstart }\n          onTouchmove={ onTouchmove }\n          onTouchend={ onTouchend }\n          onMousedown={ onTouchstart }\n          onMouseup={ onTouchend }\n          onMouseleave={ onTouchend }\n          onMousemove={ onTouchmove }\n          ref={ containerRef }\n        >\n          <div\n            class={[\n              'v-pull-to-refresh__pull-down',\n              {\n                'v-pull-to-refresh__pull-down--touching': touching.value,\n              },\n            ]}\n            style={{\n              top: convertToUnit(-1 * props.pullDownThreshold + topOffset.value),\n              height: convertToUnit(props.pullDownThreshold),\n            }}\n          >\n            { slots.pullDownPanel\n              ? slots.pullDownPanel({\n                canRefresh: canRefresh.value,\n                goingUp: goingUp.value,\n                refreshing: refreshing.value,\n              }) : (\n                <div\n                  class={[\n                    'v-pull-to-refresh__pull-down-default',\n                  ]}\n                >\n                  {\n                    refreshing.value ? (\n                      <VProgressCircular\n                        indeterminate\n                        active={ false }\n                      />\n                    ) : (\n                      <VIcon\n                        icon={ canRefresh.value || goingUp.value ? '$sortAsc' : '$sortDesc' }\n                      />\n                    )\n                  }\n                </div>\n              )\n            }\n          </div>\n          <div\n            class={[\n              'v-pull-to-refresh__scroll-container',\n              {\n                'v-pull-to-refresh__scroll-container--touching': touching.value,\n              },\n            ]}\n            style={{ top: convertToUnit(topOffset.value) }}\n          >\n            { slots.default?.() }\n          </div>\n        </div>\n      )\n    })\n  },\n})\n\nexport type VPullToRefresh = InstanceType<typeof VPullToRefresh>\n"],
  "mappings": "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",
  "names": ["VPullToRefresh", "genericComponent", "name", "props", "disabled", "Boolean", "pullDownThreshold", "type", "Number", "default", "emits", "load", "options", "setup", "_ref", "slots", "emit", "touchstartY", "scrollParents", "touchDiff", "shallowRef", "containerRef", "ref", "refreshing", "goingUp", "touching", "canRefresh", "computed", "value", "topOffset", "clamp", "onTouchstart", "e", "clientY", "touches", "onTouchmove", "touchY", "length", "scrollTop", "onTouchend", "done", "onMounted", "getScrollParents", "watch", "stopScrolling", "forEach", "p", "style", "overflow", "newVal", "oldVal", "useRender", "_createVNode", "top", "convertToUnit", "height", "pullDownPanel", "VProgressCircular", "VIcon"]
}
