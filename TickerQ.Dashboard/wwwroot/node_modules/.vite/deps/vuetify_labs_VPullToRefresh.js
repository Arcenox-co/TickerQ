import {
  VIcon,
  VProgressCircular
} from "./chunk-HIBBWGMW.js";
import "./chunk-W5USJ7PM.js";
import "./chunk-PMGLJO2J.js";
import {
  clamp,
  convertToUnit,
  genericComponent,
  getScrollParents,
  useRender
} from "./chunk-COBN6H57.js";
import {
  computed,
  createVNode,
  onMounted,
  ref,
  shallowRef,
  watch
} from "./chunk-U3LI7FBV.js";
import "./chunk-PR4QN5HX.js";

// node_modules/vuetify/lib/labs/VPullToRefresh/VPullToRefresh.mjs
import "/Users/albertkunushevci/Arcenox/Git-Projects/TickerQ/TickerQ.Dashboard/wwwroot/node_modules/vuetify/lib/labs/VPullToRefresh/VPullToRefresh.css";
var VPullToRefresh = genericComponent()({
  name: "VPullToRefresh",
  props: {
    disabled: Boolean,
    pullDownThreshold: {
      type: Number,
      default: 64
    }
  },
  emits: {
    load: (options) => true
  },
  setup(props, _ref) {
    let {
      slots,
      emit
    } = _ref;
    let touchstartY = 0;
    let scrollParents = [];
    const touchDiff = shallowRef(0);
    const containerRef = ref();
    const refreshing = shallowRef(false);
    const goingUp = shallowRef(false);
    const touching = shallowRef(false);
    const canRefresh = computed(() => touchDiff.value >= props.pullDownThreshold && !refreshing.value);
    const topOffset = computed(() => clamp(touchDiff.value, 0, props.pullDownThreshold));
    function onTouchstart(e) {
      if (refreshing.value || props.disabled) return;
      touching.value = true;
      touchstartY = "clientY" in e ? e.clientY : e.touches[0].clientY;
    }
    function onTouchmove(e) {
      if (refreshing.value || !touching.value || props.disabled) return;
      const touchY = "clientY" in e ? e.clientY : e.touches[0].clientY;
      if (scrollParents.length && !scrollParents[0].scrollTop) {
        touchDiff.value = touchY - touchstartY;
      }
    }
    function onTouchend(e) {
      if (refreshing.value || props.disabled) return;
      touching.value = false;
      if (canRefresh.value) {
        let done = function() {
          if (!refreshing.value) return;
          touchDiff.value = 0;
          refreshing.value = false;
        };
        emit("load", {
          done
        });
        refreshing.value = true;
      } else {
        touchDiff.value = 0;
      }
    }
    onMounted(() => {
      scrollParents = getScrollParents(containerRef.value);
    });
    watch([topOffset, refreshing], () => {
      if (scrollParents.length) {
        const stopScrolling = topOffset.value && !refreshing.value;
        scrollParents.forEach((p) => p.style.overflow = stopScrolling ? "hidden" : "auto");
      }
    });
    watch(topOffset, (newVal, oldVal) => {
      goingUp.value = newVal < oldVal;
    });
    useRender(() => {
      var _a;
      return createVNode("div", {
        "class": ["v-pull-to-refresh"],
        "onTouchstart": onTouchstart,
        "onTouchmove": onTouchmove,
        "onTouchend": onTouchend,
        "onMousedown": onTouchstart,
        "onMouseup": onTouchend,
        "onMouseleave": onTouchend,
        "onMousemove": onTouchmove,
        "ref": containerRef
      }, [createVNode("div", {
        "class": ["v-pull-to-refresh__pull-down", {
          "v-pull-to-refresh__pull-down--touching": touching.value
        }],
        "style": {
          top: convertToUnit(-1 * props.pullDownThreshold + topOffset.value),
          height: convertToUnit(props.pullDownThreshold)
        }
      }, [slots.pullDownPanel ? slots.pullDownPanel({
        canRefresh: canRefresh.value,
        goingUp: goingUp.value,
        refreshing: refreshing.value
      }) : createVNode("div", {
        "class": ["v-pull-to-refresh__pull-down-default"]
      }, [refreshing.value ? createVNode(VProgressCircular, {
        "indeterminate": true,
        "active": false
      }, null) : createVNode(VIcon, {
        "icon": canRefresh.value || goingUp.value ? "$sortAsc" : "$sortDesc"
      }, null)])]), createVNode("div", {
        "class": ["v-pull-to-refresh__scroll-container", {
          "v-pull-to-refresh__scroll-container--touching": touching.value
        }],
        "style": {
          top: convertToUnit(topOffset.value)
        }
      }, [(_a = slots.default) == null ? void 0 : _a.call(slots)])]);
    });
  }
});
export {
  VPullToRefresh
};
//# sourceMappingURL=vuetify_labs_VPullToRefresh.js.map
