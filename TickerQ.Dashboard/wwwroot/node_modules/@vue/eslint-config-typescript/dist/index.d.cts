import * as tseslint from 'typescript-eslint';
import { FlatConfig } from '@typescript-eslint/utils/ts-eslint';

declare const CONFIG_NAMES: readonly ["all", "base", "disableTypeChecked", "eslintRecommended", "recommended", "recommendedTypeChecked", "recommendedTypeCheckedOnly", "strict", "strictTypeChecked", "strictTypeCheckedOnly", "stylistic", "stylisticTypeChecked", "stylisticTypeCheckedOnly"];
type ExtendableConfigName = (typeof CONFIG_NAMES)[number];
declare class TsEslintConfigForVue {
    configName: ExtendableConfigName;
    constructor(configName: ExtendableConfigName);
    needsTypeChecking(): boolean;
    toConfigArray(): FlatConfig.ConfigArray;
}
declare const vueTsConfigs: Record<ExtendableConfigName, TsEslintConfigForVue>;

type ScriptLang = 'ts' | 'tsx' | 'js' | 'jsx';

type ConfigArray = ReturnType<typeof tseslint.config>;
type ConfigObjectOrPlaceholder = ConfigArray[number] | TsEslintConfigForVue;
type InfiniteDepthConfigWithVueSupport = ConfigObjectOrPlaceholder | InfiniteDepthConfigWithVueSupport[];
type ProjectOptions = {
    scriptLangs?: ScriptLang[];
    rootDir?: string;
};
declare function configureVueProject(userOptions: ProjectOptions): void;
declare function defineConfigWithVueTs(...configs: InfiniteDepthConfigWithVueSupport[]): ConfigArray;

type ConfigOptions = ProjectOptions & {
    extends?: ExtendableConfigName[];
    supportedScriptLangs?: Record<ScriptLang, boolean>;
};
/**
 * @deprecated Use `defineConfigWithVueTs` + `vueTsConfigs` instead.
 */
declare function createConfig({ extends: configNamesToExtend, supportedScriptLangs, rootDir, }?: ConfigOptions): FlatConfig.ConfigArray;

/**
 * @deprecated `defineConfig` is renamed to `defineConfigWithVueTs` in 14.3.0
 */
declare const defineConfig: typeof defineConfigWithVueTs;

export { configureVueProject, createConfig, createConfig as default, defineConfig, defineConfigWithVueTs, vueTsConfigs };
